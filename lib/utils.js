/**
 * Generates a key for a file in a directory.
 *
 * @param {string} hash - The hash of the file.
 * @param {string} ext - The extension of the file.
 * @return {string} The key generated by joining the file hash and the extension.
 */
const getKey = (hash, ext) => {
  return `${hash}${ext}`
}

/**
 * Generates the URL for accessing a file in Appwrite's storage service.
 *
 * @param {Object} options - The options object.
 * @param {string} options.endpoint - The Appwrite API endpoint.
 * @param {string} options.bucketId - The ID of the bucket where the file is stored.
 * @param {string} options.fileId - The ID of the file.
 * @param {string} options.projectId - The ID of the Appwrite project.
 * @return {string} The URL for accessing the file.
 */
const getUrlFile = ({ endpoint, bucketId, fileId, projectId }) => {
  return `${endpoint}/storage/buckets/${bucketId}/files/${fileId}/view?project=${projectId}`
}

/**
 * Show the size limit on human readable metrics
 *
 * @param {number} bytes
 * @returns {string}
 */
const bytesToHumanReadable = (bytes) => {
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB']
  if (bytes === 0) {
    return '0 Bytes'
  }

  const indexToParse = `${Math.floor(Math.log(bytes) / Math.log(1000))}`
  const index = parseInt(indexToParse, 10)

  return `${Math.round(bytes / 1000 ** index)} ${sizes[index]}`
}

module.exports = {
  getKey,
  getUrlFile,
  bytesToHumanReadable,
}
